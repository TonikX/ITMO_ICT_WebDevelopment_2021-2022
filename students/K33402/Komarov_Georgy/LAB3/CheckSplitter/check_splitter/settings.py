"""
Django settings for check_splitter project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import sys

import environ
import sentry_sdk
from django.urls import reverse_lazy
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
REPO_DIR = os.path.dirname(BASE_DIR)

DATA_DIR = os.path.join(REPO_DIR, 'data')

TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')

# Add REPO_DIR to PYTHONPATH
sys.path.insert(0, REPO_DIR)

# Environment variables settings
env = environ.Env(
    # set casting, default value
    DJANGO_DEBUG=(bool, False),
    DJANGO_ALLOWED_HOSTS=(list, []),
    DJANGO_CORS_ORIGIN_WHITELIST=(list, []),
)

# Take environment variables from .env file
environ.Env.read_env(os.path.join(REPO_DIR, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DJANGO_DEBUG')

ALLOWED_HOSTS = env('DJANGO_ALLOWED_HOSTS')
CORS_ORIGIN_WHITELIST = env('DJANGO_CORS_ORIGIN_WHITELIST')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.vk',
    'corsheaders',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'django_extensions',
    'drf_spectacular',
    'imagekit',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'silk',
    'simple_history',

    'receipts',
    'users',
]

MIDDLEWARE = [
    'silk.middleware.SilkyMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_currentuser.middleware.ThreadLocalUserMiddleware',
]

SITE_ID = 1

ROOT_URLCONF = 'check_splitter.urls'

TEMPLATES = [
    {
        'BACKEND':  'django.template.backends.django.DjangoTemplates',
        'DIRS':     [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS':  {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'check_splitter.interfaces.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': env.db(default=f'sqlite:///{os.path.join(DATA_DIR, "db.sqlite3")}'),
}

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/api/static/'
STATIC_ROOT = os.path.join(DATA_DIR, 'static')
STATICFILES_DIRS = []
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Media files (images, documents)
MEDIA_URL = '/api/media/'
MEDIA_ROOT = os.path.join(DATA_DIR, 'media')

LOGGING = {
    'version':                  1,
    'disable_existing_loggers': False,
    'formatters':               {
        'verbose': {
            'format':  "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple':  {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers':                 {
        'file': {
            'level':     'ERROR',
            'class':     'logging.FileHandler',
            'filename':  os.path.join(DATA_DIR, 'error.log'),
            'formatter': 'verbose'
        },
    },
    'loggers':                  {
        'django': {
            'handlers':  ['file'],
            'propagate': True,
            'level':     'ERROR',
        }
    }
}

# DRF settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # snake_case parsers for compatability with auth module
    # set camelCase parsers explicitly for ViewSet
    'DEFAULT_PARSER_CLASSES':         (
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_PERMISSION_CLASSES':     (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # snake_case renderers for compatability with auth module
    # set camelCase renderers explicitly for ViewSet
    'DEFAULT_RENDERER_CLASSES':       (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_SCHEMA_CLASS':           'drf_spectacular.openapi.AutoSchema',
    # compatability with auth/registration module
    'JSON_UNDERSCOREIZE':             {
        'no_underscore_before_number': True,
    },
}

# Authentication settings
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
)

AUTH_USER_MODEL = 'users.User'

# Login URLs
LOGIN_URL = '/'
LOGIN_REDIRECT_URL = '/'

# dj-rest-auth
REST_USE_JWT = True

JWT_AUTH_COOKIE = 'token'
JWT_AUTH_REFRESH_COOKIE = 'refresh_token'

OLD_PASSWORD_FIELD_ENABLED = True

# SimpleJwt
SIMPLE_JWT = {
    'UPDATE_LAST_LOGIN': True,
    'USER_ID_CLAIM':     'sub',
}

# django-allauth
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_MAX_EMAIL_ADDRESSES = 1

# drf-spectacular
SPECTACULAR_SETTINGS = {
    'TITLE':                   'CheckSplitter API',
    'DESCRIPTION':             'CheckSplitter API',
    'SCHEMA_PATH_PREFIX':      '/api',
    'SCHEMA_PATH_PREFIX_TRIM': False,
    'SERVE_INCLUDE_SCHEMA':    False,
    'OAUTH2_TOKEN_URL':        reverse_lazy('rest_login'),
    'OAUTH2_REFRESH_URL':      reverse_lazy('token_refresh'),
    'COMPONENT_SPLIT_REQUEST': True,
    'POSTPROCESSING_HOOKS':    [
        'drf_spectacular.hooks.postprocess_schema_enums',
        'utils.openapi.camelize_serializer_fields',
        'utils.openapi.set_tags_description',
    ],
}

# Silk profiler (profile only when DEBUG=True)
SILKY_AUTHENTICATION = True  # User must login
SILKY_AUTHORISATION = True  # User must have permissions
SILKY_PYTHON_PROFILER_FUNC = lambda request: DEBUG

# Sentry integration
sentry_sdk.init(
    dsn=env('SENTRY_DSN', default=None),
    debug=env('SENTRY_DEBUG', cast=bool, default=DEBUG),
    environment=env('SENTRY_ENVIRONMENT', default=None),
    integrations=[DjangoIntegration()],
    traces_sample_rate=1.0,
    send_default_pii=True,
)

CHECKSCAN_API_URL = 'https://api.checkscan.org/api/v2.1'
